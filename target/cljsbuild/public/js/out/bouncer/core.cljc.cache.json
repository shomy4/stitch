["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$bouncer.core","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","^<","^<","~$goog.string.format","^="],"~:uses",null,"~:defs",["^ ","~$wrap-chain",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","~:line",133,"~:column",8,"~:end-line",133,"~:end-column",18,"~:private",true,"~:arglists",["~#list",["~$quote",["^J",[["~$old-state","~$message-fn","~$&","~$fs"]]]]],"~:doc","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",[["^J",["^L","^M","^N"]]],"^I",["^J",[["^L","^M","~$&","^N"]]],"~:arglists-meta",["^J",[null]]]],"^H",true,"^7","~$bouncer.core/wrap-chain","^Q",true,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",18,"^P",["^ ","^Q",true,"^R",2,"^S",[["^J",["^L","^M","^N"]]],"^I",["^J",[["^L","^M","~$&","^N"]]],"^T",["^J",[null]]],"^S",[["^J",["^L","^M","^N"]]],"~:protocol-impl",null,"^T",["^J",[null]],"^E",1,"^D",133,"^F",133,"^R",2,"~:fn-var",true,"^I",["^J",[["^L","^M","~$&","^N"]]],"^O","Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"],"~$wrap",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",85,"^E",8,"^F",85,"^G",12,"^H",true,"^I",["^J",["^K",["^J",[["^M","~$acc",["~$pred","~$k","~$&","~$args"]]]]]],"^O","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"^H",true,"^7","~$bouncer.core/wrap","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",12,"^S",["^J",[["^M","^Y","~$p__56866"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",85,"^F",85,"^R",3,"^W",true,"^I",["^J",["^K",["^J",[["^M","^Y",["^Z","~$k","~$&","^["]]]]]],"^O","Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"],"~$validate*",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",150,"^E",8,"^F",150,"^G",17,"^H",true,"^I",["^J",["^K",["^J",[["^M","~$m","^N"]]]]],"^O","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"^H",true,"^7","~$bouncer.core/validate*","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",17,"^S",["^J",[["^M","~$m","^N"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",150,"^F",150,"^R",3,"^W",true,"^I",["^J",["^K",["^J",[["^M","~$m","^N"]]]]],"^O","Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."],"~$valid?",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",221,"^E",7,"^F",221,"^G",13,"^I",["^J",["^K",["^J",[["~$&","^["]]]]],"^O","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise.","^P",["^ ","^Q",true,"^R",0,"^S",[["^J",["^["]]],"^I",["^J",[["~$&","^["]]],"^T",["^J",[null]]]],"^7","~$bouncer.core/valid?","^Q",true,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",13,"^P",["^ ","^Q",true,"^R",0,"^S",[["^J",["^["]]],"^I",["^J",[["~$&","^["]]],"^T",["^J",[null]]],"^S",[["^J",["^["]]],"^V",null,"^T",["^J",[null]],"^E",1,"^D",221,"^F",221,"^R",0,"^W",true,"^I",["^J",[["~$&","^["]]],"^O","Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise."],"~$validate",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",178,"^E",7,"^F",178,"^G",15,"^I",["^J",["^K",["^J",[["~$&","^["]]]]],"^O","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n","^P",["^ ","^Q",true,"^R",0,"^S",[["^J",["^["]]],"^I",["^J",[["~$&","^["]]],"^T",["^J",[null]]]],"^7","~$bouncer.core/validate","^Q",true,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",15,"^P",["^ ","^Q",true,"^R",0,"^S",[["^J",["^["]]],"^I",["^J",[["~$&","^["]]],"^T",["^J",[null]]],"^S",[["^J",["^["]]],"^V",null,"^T",["^J",[null]],"^E",1,"^D",178,"^F",178,"^R",0,"^W",true,"^I",["^J",[["~$&","^["]]],"^O","Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n"],"~$build-multi-step",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",24,"^E",8,"^F",24,"^G",24,"^H",true,"^I",["^J",["^K",["^J",[["~$key-or-vec","~$fn-vec"],["^19",["~$f-or-list","~$&","~$rest"],"^Y"]]]]],"^P",["^ ","^Q",false,"^R",3,"^S",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]],"^I",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]],"^T",["^J",[null,null]]]],"^H",true,"^7","~$bouncer.core/build-multi-step","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",24,"^P",["^ ","^Q",false,"^R",3,"^S",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]],"^I",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]],"^T",["^J",[null,null]]],"^S",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",24,"^F",24,"^R",3,"^W",true,"^I",["^J",[["^19","^1:"],["^19",["^1;","~$&","^1<"],"^Y"]]]],"~$build-steps",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",64,"^E",8,"^F",64,"^G",19,"^H",true,"^I",["^J",["^K",["^J",[[["~$head","~$&","~$tail","~:as","~$forms"]]]]]]],"^H",true,"^7","~$bouncer.core/build-steps","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",19,"^S",["^J",[["~$p__56850"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",64,"^F",64,"^R",1,"^W",true,"^I",["^J",["^K",["^J",[[["^1?","~$&","^1@","^1A","^1B"]]]]]]],"~$pre-condition-met?",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",82,"^E",8,"^F",82,"^G",26,"^H",true,"^I",["^J",["^K",["^J",[["~$pre-fn","~$map"]]]]]],"^H",true,"^7","~$bouncer.core/pre-condition-met?","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",26,"^S",["^J",[["^1F","^1G"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",82,"^F",82,"^R",2,"^W",true,"^I",["^J",["^K",["^J",[["^1F","^1G"]]]]]],"~$merge-path",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",40,"^E",8,"^F",40,"^G",18,"^H",true,"^I",["^J",["^K",["^J",[["~$parent-key","~$validations-map"]]]]],"^O","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"^H",true,"^7","~$bouncer.core/merge-path","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",18,"^S",["^J",[["^1J","^1K"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",40,"^F",40,"^R",2,"^W",true,"^I",["^J",["^K",["^J",[["^1J","^1K"]]]]],"^O","Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"],"~$with-default-messages",["^ ","^A",null,"^B",["^ ","^C","/home/milos/workspace/stitch/target/cljsbuild/public/js/out/bouncer/core.cljc","^D",165,"^E",7,"^F",165,"^G",28,"^I",["^J",["^K",["^J",[["~$error"]]]]],"^O","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"],"^7","~$bouncer.core/with-default-messages","^Q",false,"^C","target/cljsbuild/public/js/out/bouncer/core.cljc","^G",28,"^S",["^J",[["^1N"]]],"^V",null,"^T",["^J",[null,null]],"^E",1,"^D",165,"^F",165,"^R",1,"^W",true,"^I",["^J",["^K",["^J",[["^1N"]]]]],"^O","Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:args","~:path","~:pre","~:else","~:value","~:bouncer.core/errors","~:optional","~:metadata","~:default-message-format","~:message"]],"~:order",["^1V","^1X","^1Y","^1[","^20","^1U","^1T","^1W","^1S","^1Z"]],"^O","The `core` namespace provides the two main entry point functions in bouncer:\n\n  - `validate`\n  - `valid?`\n\n\nAll other functions are meant for internal use only and shouldn't be relied upon.\n\nThe project [README](https://github.com/leonardoborges/bouncer/blob/master/README.md) should get you started,\nit's pretty comprehensive.\n\n\nIf you'd like to know more about the motivation behind `bouncer`, check the\n[announcement post](http://www.leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/)."]